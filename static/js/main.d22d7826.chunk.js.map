{"version":3,"sources":["reportWebVitals.js","card.js","cardcomponent.js","searchBox.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","App","useState","setRobots","setSearchField","count","setCount","useEffect","fetch","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","onClick","prev","event","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sJAYeA,G,KAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sBCUCQ,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACtB,OACI,sBAAKC,UAAU,uDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,gCACI,6BAAKL,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACA,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACA,cAAC,EAAD,CAEAV,KAAOO,EAAOG,GAAGV,KACjBE,GAAKK,EAAOG,GAAGR,GACfD,MAAOM,EAAOG,GAAGT,OAHZS,SCKEC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAa,eACbC,SAAUH,OC2BPI,MAhCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJX,EADI,KACGY,EADH,OAE0BD,mBAAS,IAFnC,mBAEJN,EAFI,KAEQQ,EAFR,OAGcF,mBAAS,GAHvB,mBAGJG,EAHI,KAGEC,EAHF,KAKXC,qBAAU,WACNC,MAAM,8CACL/B,MAAK,SAAAgC,GAAQ,OAAGA,EAASC,UACzBjC,MAAK,SAAAkC,GAAK,OAAER,EAAUQ,MACvBC,QAAQC,IAAI,QAAQR,KACtB,CAACA,IAEH,IAIUS,EAAiBvB,EAAOwB,QAAO,SAAAC,GACjC,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAStB,EAAYqB,kBAG7D,OACI,sBAAK9B,UAAU,KAAf,UACI,6CACA,wBAAQgC,QARC,SAACC,GAAD,OAAUd,EAASc,EAAK,IAQjC,uBACA,cAAC,EAAD,CAAWvB,aAZI,SAACwB,GACpBjB,EAAeiB,EAAMC,OAAOC,UAaxB,cAAC,EAAD,CAAUhC,OAAQuB,QCvB9BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtD,K","file":"static/js/main.d22d7826.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n\nconst Card = ({name,email,id}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\n            <img src={`https://robohash.org/${id}?200X200`} alt='robots'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default Card;","import React from 'react';\n\nimport Card from './card'\n\nconst CardList = ({robots}) => {\n    return (\n    <div>\n        {\n        robots.map((user,i) => {\n        return (\n        <Card \n        key={i} \n        name= {robots[i].name} \n        id= {robots[i].id} \n        email={robots[i].email}\n        />\n      ); \n    })\n}\n    </div>\n    )\n}\n\nexport default CardList;\n","import React from 'react';\n\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder= 'search robot'\n            onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox ;","import React, { useState, useEffect } from 'react';\n\nimport CardList from './cardcomponent';\nimport SearchBox from './searchBox'\n\nfunction App() {\n    const [robots,setRobots]= useState([]);\n    const [searchField,setSearchField] = useState('');\n    const [count,setCount] = useState(0)\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response =>response.json())\n        .then(users=>setRobots(users))\n        console.log('test1',count);\n    },[count])\n\n    const onSearchChange = (event) => {\n        setSearchField(event.target.value);\n    }\n    const clickFun = (prev) => setCount(prev+1);\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        \n    return (\n        <div className='tc'>\n            <h1>Robofriends</h1>\n            <button onClick={clickFun}>Click Me </button>\n            <SearchBox searchChange={onSearchChange}/>\n            \n            <CardList robots={filteredRobots}/>\n\n        </div>\n    )\n  }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}